//  Nivel 1: B√°sico
// Objetivo: Comprender qu√© son los callbacks y closures, e implementarlos en situaciones simples.

// Ejercicio 1: Callback simple
// Crea una funci√≥n saludarUsuario(nombre, callback) que salude al usuario y luego ejecute un callback que muestre un mensaje adicional.

const saludarUsuario = (nombre, saludoExtra) => {
  console.log(`Hola ${nombre}`);
  saludoExtra();
};

saludarUsuario("Dante", () => console.log("Como estas?"));
console.log("==================================");

// Ejercicio 2: Usando un callback para sumar
// Crea una funci√≥n operar(a, b, callback) que reciba dos n√∫meros y un callback. El callback deber√° definir la operaci√≥n a realizar (suma, resta, etc.).

const operar = (a, b, operacion) => {
  operacion(a, b);
};

operar(5, 4, (n1, n2) => console.log(n1 * n2));
console.log("==================================");

// Ejercicio 3: Closure contador
// Crea una funci√≥n crearContador() que devuelva una funci√≥n que incremente un contador interno cada vez que se llame.

const crearContador = () => {
  let contador = 0;
  const incrementarContador = () => ++contador;
  return incrementarContador;
};

const contador1 = crearContador();
const contador2 = crearContador();
console.log(contador1());
console.log(contador1());
console.log(contador1());
console.log(contador2());
console.log("==================================");

// Ejercicio 4: Acceso restringido
// Crea una funci√≥n crearAcceso(claveCorrecta) que devuelva otra funci√≥n que solo permita el acceso si se le pasa la clave correcta.

const crearAcceso = (claveCorrecta) => {
  const saludar = () => {
    claveCorrecta === "pepito123"
      ? console.log("Bienvenido")
      : console.log("Acceso Denegado");
  };
  return saludar;
};

const acceso = crearAcceso("pepito123");
acceso();
console.log("==================================");

// Ejercicio 5: Mensaje personalizado
// Crea una funci√≥n crearMensajeSaludo(nombre) que devuelva otra funci√≥n que al ser llamada devuelva un mensaje como ‚ÄúHola, [nombre], ¬°bienvenido de nuevo!‚Äù.

const crearMensajeSaludo = (nombre) => {
  const saludar = () => {
    console.log(`Hola ${nombre}, ¬°bienvenido de nuevo!`);
  };
  return saludar;
};

const saludoDante = crearMensajeSaludo("Dante");
saludoDante();
console.log("==================================");

// üî∏ Nivel 2: Intermedio
// Objetivo: Aplicar callbacks y closures en estructuras m√°s complejas como arrays, l√≥gica condicional, y gesti√≥n de estado.

// Ejercicio 6: Manejador de errores
// Crea una funci√≥n ejecutarConManejo(callback, errorCallback) que ejecute callback y, si ocurre una excepci√≥n, llame a errorCallback con el error.

const ejecutarConManejo = (callback, errorCallback) => {
  try {
    callback();
  } catch (error) {
    errorCallback(error);
  }
};

ejecutarConManejo(
  () => {
    throw new Error("404 not found");
  },
  (error) => {
    console.error(`Error: ${error.message}`);
  }
);
console.log("==================================");

// Ejercicio 7: Filtro personalizado
// Escribe una funci√≥n filtrarArray(arr, callback) que devuelva un nuevo arreglo con los elementos para los que callback devuelva true.

const filtrarArray = (array, condicion) => {
  const resultado = [];
  for (const elemento of array) {
    if (condicion(elemento)) {
      resultado.push(elemento);
    }
  }
  return resultado;
};

console.log(
  filtrarArray([1, 2, 3, 4, 5, 6, 7, 8], (numero) => numero % 2 === 0)
);
console.log("==================================");

// Ejercicio 8: Multiplicador con closure
// Crea una funci√≥n crearMultiplicador(factor) que devuelva otra funci√≥n que multiplique su argumento por factor.

const crearMultiplicador = (factor) => {
  const multiplicar = (argumento) => factor * argumento;
  return multiplicar;
};

const multiplicador5 = crearMultiplicador(5);
console.log(multiplicador5(3));
console.log("==================================");

// Ejercicio 9: Temporizador con callback
// Crea una funci√≥n temporizador(ms, callback) que ejecute el callback luego de ms milisegundos.

const temporizador = (ms, cualquierFuncion) => {
  setTimeout(cualquierFuncion, ms);
};

temporizador(3000, () => console.log("a\n=================================="));

// Ejercicio 10: Registro con cierre
// Crea una funci√≥n crearLogger() que devuelva una funci√≥n que almacene mensajes internamente. Otra funci√≥n debe permitir obtener todos los mensajes logueados.

const crearLogger = () => {
  const mensajes = [];
  const almacenarMensaje = (mensaje) => mensajes.push(mensaje);
  const obtenerMensajes = (arrayMensajes) => {
    for (const mensajito of mensajes) {
      console.log(mensajito);
    }
  };
  return { almacenarMensaje, obtenerMensajes };
};

const logger = crearLogger();
logger.almacenarMensaje("Hola esto es un mensajito");
logger.almacenarMensaje("esto es otro mensaje");
logger.obtenerMensajes();
console.log("==================================");

// üî∫ Nivel 3: Avanzado
// Objetivo: Usar closures para ocultar l√≥gica interna y callbacks para extender funcionalidad en patrones m√°s abstractos.

// Ejercicio 11: Event Emitter b√°sico
// Crea una funci√≥n crearEventEmitter() que permita registrar eventos (on), emitir eventos (emit) y remover escuchadores (off), usando closures.

const crearEventEmitter = () => {
  const on = () => {};
  const emit = () => {};
  const off = () => {};
  return { on, emit, off };
};

const eventEmitter = crearEventEmitter();
eventEmitter.on();
eventEmitter.emit();
eventEmitter.off();

// Ejercicio 12: Memoizaci√≥n con closure
// Implementa una funci√≥n memoizar(fn) que retorne una versi√≥n de fn que cachee los resultados de llamadas previas.

const memoizar = (fn) => {};

// Ejercicio 13: Secuenciador de funciones
// Crea una funci√≥n ejecutarEnOrden(funciones, callbackFinal) que reciba un array de funciones as√≠ncronas (que usan callback) y las ejecute en orden.

// Ejercicio 14: Sistema de autenticaci√≥n
// Crea un closure crearAutenticador(usuario, contrase√±a) que retorne una funci√≥n que verifique credenciales y otra para cambiar la contrase√±a.
